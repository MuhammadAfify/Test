#include "stm32f4_discovery.h"

DMA_InitTypeDef DMA_InitStructure;

void DMA_Config(void);
void USART_Config(void);
void GPIO_Config(void);
void NVIC_Config(void);

uint32_t SRC_Buffer[4]={1,2,3,4};
int main(void)
{
DMA_Config();
USART_Config();
GPIO_Config();
NVIC_Config();
while(1)
{
DMA_Config();
}
}
void DMA_Config(void)
{
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
  DMA_DeInit(DMA2_Stream4);
  
  DMA_InitStructure.DMA_BufferSize=4;
  DMA_InitStructure.DMA_Channel=DMA_Channel_4;
  DMA_InitStructure.DMA_DIR=DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_Memory0BaseAddr=(uint32_t)SRC_Buffer;
  DMA_InitStructure.DMA_MemoryBurst=DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_MemoryDataSize=DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryInc=DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode=DMA_Mode_Normal;
  DMA_InitStructure.DMA_PeripheralBaseAddr=((uint32_t)UART4 + 0x04);
  DMA_InitStructure.DMA_Priority=DMA_Priority_High;
  DMA_InitStructure.DMA_PeripheralBurst=DMA_PeripheralBurst_Single;
  DMA_InitStructure.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_PeripheralInc=DMA_PeripheralInc_Enable;
  
  DMA_Init(DMA1_Stream4,&DMA_InitStructure);
  USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE);
  USART_SendData(UART4,(uint16_t)SRC_Buffer[4]);
  USART_ClearITPendingBit(UART4, USART_IT_TC );
  DMA_Cmd(DMA1_Stream4,ENABLE);
}

//UART Config
void USART_Config(void)
{
USART_InitTypeDef USART_InitStructure;
RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);

USART_InitStructure.USART_BaudRate=9600;
USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
USART_InitStructure.USART_Mode=USART_Mode_Rx | USART_Mode_Tx;
USART_InitStructure.USART_Parity=USART_Parity_No;
USART_InitStructure.USART_StopBits=USART_StopBits_2;
USART_InitStructure.USART_WordLength=USART_WordLength_8b;
USART_Init(UART4,&USART_InitStructure);
USART_Cmd(UART4,  ENABLE);
USART_ITConfig(UART4, USART_IT_TC, ENABLE);
}
void GPIO_Config(void)
{
GPIO_InitTypeDef GPIO_InitStructure;
//RCC Config
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
   
//GPIO Config RX
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
GPIO_Init(GPIOA, &GPIO_InitStructure);
    
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
GPIO_Init(GPIOA, &GPIO_InitStructure);

//AF Config
GPIO_PinAFConfig(GPIOA, GPIO_PinSource0  ,GPIO_AF_UART4); 
GPIO_PinAFConfig(GPIOA, GPIO_PinSource1 ,GPIO_AF_UART4);
}
void NVIC_Config(void)
{
NVIC_InitTypeDef NVIC_InitStructure;
NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 //NVIC Config
NVIC_InitStructure.NVIC_IRQChannel=UART4_IRQn;
NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;
NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;
NVIC_Init(&NVIC_InitStructure);
}
void UART4_IRQHandler(void)
{
if (USART_GetFlagStatus(UART4,USART_FLAG_TC)==SET)
{
DMA_Cmd(DMA1_Stream4,DISABLE);
USART_ITConfig(UART4, USART_IT_TC, DISABLE);
DMA_ClearITPendingBit(DMA2_Stream4,DMA_IT_TC);
}
}
